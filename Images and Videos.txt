# IMAGES AND VIDEOS
-------------------

* Introduction to Images and Videos
-----------------------------------
<1 min
So far, we’ve learned to create dynamic p5.js sketches using only shapes and colors.

But, just like how you might add external images or videos onto a normal webpage, you can also use the p5.js library to incorporate external images or videos directly into the canvas!

By the end of this lesson, you will be able to:

	. Load and draw external images into the canvas

	. Display external videos in the canvas

	. Add filters effects across images and the canvas

	. Read and manipulate the pixels within the canvas, as well as in images and videos

* Instructions
--------------
Explore the p5.js sketch to the right. You’ll see that it uses a still image, an animated GIF image, and a video to create a multi-media collage. Click anywhere on the sketch to watch the 
video play!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Loading and Drawing Images
----------------------------
7 min
Unlike the primitive shapes we’ve drawn so far, media, like images, are considered external assets. To include them in our sketches, we will need to load them using special, built-in 
p5.js functions.

To load an image, use the loadImage() function. It requires one argument—the path to the image in your working directory.

img = loadImage('imageName.jpg');

The loadImage() function returns a p5.js Image element. Saving it to a variable lets us reuse the loaded image as many times as we want.

After loading an image, we use the image() function to draw it. The function requires three arguments: the p5.js Image element and the x and y positions where the image should be drawn on 
the canvas.

//Draw img to the top left corner of the canvas
image(img, 0, 0);

Optionally, the image() function can take other arguments. We can also resize the drawn image to a certain width and height, as follows:

let drawnWidth = 100;
let drawnHeight = 100;
image(img, 0, 0, drawnWidth, drawnHeight);

We can also add an additional four arguments to draw a cropped region of the image—check out the p5.js documentation to learn more.

You can also load and draw animated GIFs into the canvas using loadImage() and image(). To have them animate, you specifically need to put them inside the draw() loop. They’re essentially 
multiple images packed into one, so calling image() in the draw() loop will draw the latest frame of the GIF, allowing it to animate.

draw() {
  image(myAnimatedGIF, 0, 0);
}

Because drawing an image requires it to be completely loaded, it’s important to note how and when these functions are called.

Loading images takes time. In most cases, the loadImage() function won’t finish loading an image before the next lines of code are run—including any code that is supposed to draw the 
image.

Sometimes this is OK, but it can also potentially lead to unintended behavior. Later, we’ll learn to work around this problem by having more control over the loading of the images.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the setup() function, load an image with the path given by imagePath. Save the loaded image to the img variable.


Hint
The syntax for loading an external image is:

variableName = loadImage('imageName.jpg');

Checkpoint 2 Passed
2.
In the draw() function after the line that draws the background color, draw the image at the top left corner of the canvas.


Hint
The syntax for drawing an image at a certain x, y position on the canvas is:

image(img, x, y);

The top left corner of the canvas is given by the coordinates (0, 0).

Checkpoint 3 Passed
3.
The image is cut off—we only see the top left piece of it!

Modify your image() function so that the image is scaled to the width and height of the canvas.


Hint
Remember that you can get the width and height of the canvas from built-in p5.js variables, width and height.

You can also see the width and height by looking at the parameters given to the createCanvas() function.

When supplied with values for width and height, the image() function lets you draw a scaled image to the canvas, as follows:

image(img, x, y, width, height);

sketch.js
---------
let img;
let imagePath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/cutePuppy.jpg';

function setup() {
  createCanvas(300, 400);
  //Load image here:
  img = loadImage(imagePath);
}

function draw() {
  background(220);
  //Draw image here:
  image(img, 0, 0, width, height);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Preload Function
----------------------
6 min
If you’ve ever web-surfed with poor internet connection—you know firsthand that images can take a while to show up, even if other parts of the page load just fine.

This same behavior applies to p5.js sketches. Loading images takes time, and p5.js will typically move onto other code before an image fully loads.

In the last exercise, this was okay because we drew our image in the infinitely looping draw() function. Even if the image wasn’t loaded when the image() function was first called, it 
eventually could be drawn to the canvas.

But sometimes, it’s important that images are completely loaded before we attempt to draw them. For example, check out what happens when we try to load and draw the image within the 
setup() function:

A diagram that demonstrates what happens when you load and try to draw an image in the setup() function. The image never ends up drawing to the canvas.

Here, the image never shows up! By the time the image() function is called, the image isn’t fully loaded yet. The setup() function runs only once, so the image is not eventually drawn.

To solve problems like this, p5.js includes the preload() function. Like the setup() and draw() functions, it’s a special function to hold specific kinds of code for our p5.js sketch. 
Specifically, the preload() function is meant for code that loads external assets, like the loadImage() function.

let img;

function preload(){
    img = loadImage('myImage.png');
}

The p5.js library calls the preload() function before the setup() and draw() functions, which run only once all assets in preload() are entirely loaded.

let img;

function preload(){
  //This runs first.
  img = loadImage('myImage.png');

function setup(){
  //This runs once when all assets in preload() are completely loaded.
}
function draw(){
  //This loops infinitely after setup() finishes.
}

Let’s take a look at our previous scenario, now with the preload() function!

A diagram explaining the preload function. It walks through how p5.js will wait to load any images in preload() completely before moving onto the setup and draw functions. The image 
successfully draws to the canvas.

Our (very adorable) image now draws to the canvas! This is because p5.js waits to run the code in the setup() function only after the image is fully loaded.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code currently attempts to draw the image in the setup() function. Run the code to observe how the image does not properly draw to the canvas.

Checkpoint 2 Passed
2.
Add a preload() function to sketch.js.


Hint
The syntax for a preload() function is:

function preload(){
  //Load images here
}

Checkpoint 3 Passed
3.
Move the line of code that loads the image from the setup() function, and into the preload() function you just added. Run the code—you should now see the image!


Hint
The line containing the loadImage() function is what loads the image.

You don’t need to modify the way the loadImage() call is written—just move the existing code to inside the preload() function.

sketch.js
---------
let img;

function preload(){
  img = loadImage(imagePath);
}

let imagePath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/cutePuppy.jpg';

function setup() {
  createCanvas(300, 400);
  
  background(220);
  image(img, 0, 0, 300, 400);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Videos
--------
8 min
Now that we can add images into the canvas let’s learn how to add another major type of media: videos!

To create a p5.js video element, use the createVideo() function. It requires the video file’s path in your working directory. Here, we’ll use a video with the .mp4 format, which is a 
video file format that’s well-supported across most browsers.

let video;
video = createVideo('myVideo.mp4');

As with images, we can store video elements as variables. Typically, we’ll do this in a place like the preload() function so that we can use it later on in our sketch.

To play a video, you can use the .play() method:

video.play();

Leveraging HTML and JavaScript’s existing support for videos, the createVideo() function displays an HTML video element on the page, but not within the sketch itself.

To display the video directly within the p5 sketch, we can reuse the image() function from before:

image(video, 0, 0);

It may be confusing to use a function called ‘image’ to draw videos—but it makes sense when we think of a video as a sequence of images. When called, the image() function draws the 
current frame of the video on the canvas. When placed in the draw() loop, we can create the illusion of a video playing, frame-by-frame.

Like with drawing images, you can resize the drawn video by adding two more parameters:

let drawnWidth = 100;
let drawnHeight = 100;
image(video, 0, 0, drawnWidth, drawnHeight);

To hide the original HTML video element, we can use the .hide() method:

video.hide()

This makes the original video invisible—but it doesn’t delete it! You’ll still be able to hear the video’s sound unless you turn off its volume. We’ll get to that in the next exercise!

Note that the .hide() method will hide the video drawn on the canvas as well unless at any point you play the video. Until then, no video frames will draw to the canvas.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the preload() function, load a video with the path given by the variable videoPath, and save it to the variable video.

Run the code to see the HTML video element appear on the page.


Hint
To load a video, follow the following syntax:

let videoPath = 'myVideo.mp4';
video = createVideo(videoPath);

Checkpoint 2 Passed
2.
In the mouseClicked() function, play the video. This video file has no sound, so you shouldn’t expect to hear anything!

After running the code, you should be able to play the video by clicking anywhere on the sketch.


Hint
To play a video, use the following syntax:

video.play();

Checkpoint 3 Passed
3.
In the draw() loop, display the video onto the canvas. You can position or scale the drawn video however you choose.

Note that for the drawn video to appear, you must draw it to the canvas after the background() function is called.


Hint
To draw a video onto a canvas, use the image() function:

image(video, x, y, width, height);

Remember that width and height are optional parameters that scale what you’re drawing to the canvas to a certain dimension.

Checkpoint 4 Passed
4.
Back in the setup() function, hide the original HTML video element.

Note that now, the video will not display on the canvas until you make it play.


Hint
To hide the original HTML video element created by the createVideo() function, use the following syntax:

video.hide();

sketch.js
---------
let video;
let videoPath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/beach.mp4';

function preload(){
  //TODO: Load video here
  video = createVideo(videoPath);
}

function setup() {
  createCanvas(400, 400);
  //TODO: Hide video here
  video.hide();
}

function draw() {
  background(220);
  //TODO: Display video here
  image(video, 0, 0, width, height);
}

function mouseClicked() {
  //TODO: Play video here
  video.play();
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Video Options
---------------
7 min
Now that we can add videos to the canvas let’s take a look at some extra options p5.js gives us to control video options and playback. These options also build off of HTML and 
JavaScript’s existing support for video playback.

We already learned how to use the .play() method to play a video. In actuality, there is another way to get a video to play: the .loop() method. Whereas the .play() method only plays a 
video once, the .loop() method will play a video and loop it infinitely.

video.loop();

Because of how these methods work behind-the-scenes in JavaScript, there are some quirks that can lead to common problems. One of them is that calling .play() or .loop() way too many 
times, such as in every iteration of the draw() loop, can cause errors. In general, it’s best to call them in setup(), or call them in response to user input, like mouse clicks.

To stop a playing or looping video, use the .stop() method.

video.stop();

The .stop() method stops the video and returns it to the starting frame of the video. To pause the video at the current frame—so that you can later resume it where you left off—use the 
.pause() method:

video.pause();

To change the volume of the video’s sound, use the .volume() method. It takes in a decimal number ranging from 0 to 1, with 0 being no volume and 1 being maximum volume.

video.volume(0); // Mutes the sound
video.volume(1); // Plays sound at max volume
video.volume(0.5); //Plays sound at half volume

* Instructions
--------------
Checkpoint 1 Passed
1.
In this example, we’ll use these video methods to help build a Vlog site for Codey: Codecademy’s unofficial mascot!

Parts of the site are created already. Using p5.js, there is already a video loaded and drawn to the canvas with the image() function, but remember that the video frame will not show up 
unless the video starts playing.

Using HTML and CSS, Codey has also created a title, a page background, and buttons for video controls. The buttons, when pressed, trigger prewritten functions—your job is to help Codey 
fill them in with p5.js video control code!

First, in the pressPlayButton() function, add code that plays the video when the play button is pressed.


Hint
Hint: To play a video, use the .play() method:

video.play();

Remember to place this code inside the provided pressPlayButtton() function.

Checkpoint 2 Passed
2.
In the pressPauseButton() function, add code that pauses the video when the pause button is pressed.


Hint
Hint: To pause a video, use the .pause() method:

video.pause();

Remember to place this code inside the provided pressPauseButton() function.

Checkpoint 3 Passed
3.
In the pressToggleVolumeButton() function, fill in code to turn the volume on and off when the Toggle Volume button is pressed. When the volume is on, it should be at maximum value.


Hint
To set the volume for a video, use the .volume() method:

video.volume(0); //Turns sound off
video.volume(1); //Turns sound to max volume

sketch.js
---------
let video;
let isVolumeOn = true;
let videoPath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/codeyVlog.mp4';

function preload(){
  video = createVideo(videoPath);
}

function setup() {
  createCanvas(480, 270);
  //Creates a background with a play symbol
  background(0);
  triangle(215, 110, 275, 140, 215, 170);
  //Hides the original HTML video element
  video.hide();
}

function draw() {
  image(video, 0, 0, 480, 270);
}

function pressPlayButton() {
  //TODO: Play video here:
  video.play();
}

function pressPauseButton() {
  //TODO: Pause video here:
  video.pause();
}

function pressToggleVolumeButton() {
  if (isVolumeOn) {
    //TODO: Turn volume off here:
    video.volume(0);
  } else {
    //TODO: Turn volume on here:
    video.volume(1);
  }
  isVolumeOn = !isVolumeOn;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Filters
---------
7 min
Adding photos and videos into the canvas is cool, but the real fun comes when we add effects to them through tools like filters.

Filters in p5.js work in two ways: across the entire canvas and applied to individual images.

To apply a filter across the canvas, use the filter() function. It requires the type of filter, which can be one of eight different types as defined by p5.js. For a complete list, visit 
the p5.js reference on filters.

For example, to add a GRAY filter across the canvas, use:

filter(GRAY);

A diagram showing what the GRAY filter looks like when applied to a canvas with a pink background and an image of a puppy. The entire canvas becomes grayscale.

Certain filter types require an additional numerical argument. For example, the POSTERIZE filter, which reduces the number of colors in the image, requires a value between 2 and 255.

filter(POSTERIZE, 3);

A diagram showing what the POSTERIZE filter looks like when applied to a canvas with a pink background and an image of a puppy. The canvas becomes reduced to fewer colors.

The filter() function applies the filter to everything drawn on the canvas before it’s called—this lets us layer filters together, combining them with ones that were called previously.

A diagram showing what the GRAY and POSTERIZE filter look like when used one after another. The canvas turns grayscale and is reduced to a few shades of gray.

It also lets us apply filters to certain parts of the canvas—for example, we can apply a filter to the entire canvas, then draw new elements that’ll be unaffected.

A diagram showing the grayscale filter applied to a canvas, but another colored image of a flower is drawn on top, unaffected by the filter.

To apply filters across an individual p5 image element, use the .filter() method. You’ll need to call this before drawing the image.

//Invert colors in an image
img.filter(INVERT); 
image(img, 0, 0);

A diagram showing the invert filter only being applied to one image on the canvas. The rest of the elements are unaffected.

We can’t, however, apply filters to individual video elements (though you could instead draw a video to the canvas, then add a filter to the entire canvas).

A weakness of the filter() function is its slow performance—especially when called frequently. Later, we’ll learn how to achieve similar effects (and more!) with pixel manipulation.

* Instructions
--------------
Checkpoint 1 Passed
1.
In this exercise, you’ll see we’ve already drawn four identical images of a cute puppy to the screen. Let’s turn this sketch into pop art—or rather, pup art!

In the setup() function, add a GRAY filter to img1 before it is drawn to the canvas.


Hint
Remember the syntax for applying a filter to an individual image element is:

imageElement.filter(TYPE);

The .filter() method must be called before the image element is drawn to the canvas.

Checkpoint 2 Passed
2.
Before img2 is drawn, apply an INVERT filter to it.


Hint
To apply an invert filter, the TYPE should be set to INVERT.

Checkpoint 3 Passed
3.
Before img3 is drawn, apply a POSTERIZE filter to it. For the additional parameter, use the value 4.


Hint
Remember that some filter types, like POSTERIZE, require one additional numerical argument.

Checkpoint 4 Passed
4.
Before img4 is drawn, apply a THRESHOLD function to it. Look up details on how to apply it in the p5.js reference.


Hint
THRESHOLD is a type of filter that optionally takes in an additional numerical argument between 0 and 1. If no additional argument is provided, p5.js will use the parameter 0.5.

sketch.js
---------
let img1, img2, img3, img4;

let imagePath = `https://static-assets.codecademy.com/Courses/Learn-p5/media/cutePuppySquare.jpg`;

function preload() {
  img1 = loadImage(imagePath);
  img2 = loadImage(imagePath);
  img3 = loadImage(imagePath);
  img4 = loadImage(imagePath);
}

function setup() {
  createCanvas(400, 400);
  //TODO: Apply filters here
  img1.filter(GRAY);
  img2.filter(INVERT);
  img3.filter(POSTERIZE, 4);
  img4.filter(THRESHOLD);
  //Draws the 4 images to the canvas
  image(img1, 0, 0, 200, 200);
  image(img2, 0, 200, 200, 200);
  image(img3, 200, 0, 200, 200);
  image(img4, 200, 200, 200, 200);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Introduction to Pixel Manipulation
------------------------------------
16 min
We can also use p5.js to manipulate images and videos, down to the pixel. p5.js offers built-in functions to do this: get() and set().

The get() function accesses the color of a specific pixel on the canvas. When given a pixel location, it returns the color of that pixel as an array of four numbers, representing the red, 
green, blue, and alpha (RGBA) values.

let pixelColor = get(28, 35); // Returns [r, g, b, a], where r, g, b, a are values between 0 and 255

A diagram that shows the get() function on a small photo of a puppy. It returns a pink color at coordinates (28, 35).

Alternatively, the get() function also can retrieve regions of the canvas, returning them as a p5.js image element.

// Using get() to access a portion of canvas
let x = 0; let y = 0;
let w = 100; let h = 100;
let partOfCanvas = get(x, y, w, h); // Returns a region starting at (x, y) that's w-pixels wide and h-pixels high

When provided no arguments, it retrieves the entire canvas as a p5.js image element.

// Using get() to access entire canvas
let entireCanvas = get();

The set() function sets a pixel at a given location on the canvas to a new color.

let red = [255, 0, 0, 255];
set(28, 35, red); // Sets pixel at (28, 35) to red

A diagram that shows the set() function on a small photo of a puppy. It changes the pixel at (28,35) to red.

The color can be in several formats. Above, we’re using an array of 4 RGBA values, but you can also use a single greyscale value or a p5.js color element.

Just calling the set() function doesn’t change what you see—to reflect changes onto the canvas, you need to use the updatePixels() function after the set() call.

let red = [255, 0, 0, 255];
set(0, 0, red); // Pixel is not actually changed on screen
updatePixels(); // Now pixel is changed!

If you use set() multiple times, calling updatePixels() once will reflect all those changes.

let red = [255, 0, 0, 255];
set(0, 0, red); 
set(0, 1, red);
updatePixels(); // Both pixels are updated

The get() and set() functions also work as methods on individual image or video elements.

When using the .set() method on images or videos, you’ll need to call it, along with the .updatePixels() method, before you draw them to the canvas.

let red = [255, 0, 0, 255];
img.set(50, 50, red); // Pixel is not actually changed in our image element
img.updatePixels(); // Now pixel is changed in our pixel element
image(img, 0, 0); // Now our modified image element is on the screen

Because they’re time-intensive, get() and set() are best suited for conveniently accessing a few pixels at a time. Later, we’ll see how to do larger-scale manipulations, such as accessing 
pixels in very large images and/or doing manipulations repeatedly in the draw() loop.

* Instructions
--------------
Checkpoint 1 Passed
1.
The p5.js Sketch to the right draws a smiley image that follows the movement of your mouse cursor.

In this exercise, we will use the .get() and .set() methods on the smiley’s image element to change the black outlines in the image to blue ones. We will do this in setup(), so that we 
can draw the modified image later within the draw() loop.

First, in the setup() function, look for the double for loop that iterates through the pixels in the image. Inside the double for loop, use the .get() method to get the current pixel 
color, taking in the i, j position. Store the result as a new variable.


Hint
Remember that for individual image elements, .get() must be called as a method on the element itself.

img.get(x, y);

Because you’re in a double for loop iterating through all the pixels, the current pixel location can be represented with (i,j).

Checkpoint 2 Passed
2.
Knowing that the get() function returns a length-4 array of RGBA values, create an if statement that checks if the current pixel color is black.

Use the isPixelBlack() function defined at the bottom of sketch.js, which takes in a RGBA color array.


Hint
An if statement can be written as follows:

if (someCondition){
  //Do something here
}

The condition you’re checking for is if isPixelBlack() returns true, when given the current pixel color.

Checkpoint 3 Passed
3.
Using the if statement you just created, create logic that will set the color at the current pixel location to blue if it was originally black.

When setting the color, use the RGBA color array for the color blue: [0, 0, 255, 255].


Hint
Remember the syntax for setting the pixel color for an image element:

img.set(x, y, c);

c is a color in the form of a length-4 RGBA color array, a p5.js color element, or a single grayscale value. In this example, use the color array representation of the color blue:

blue = [0, 0, 255, 255];

Checkpoint 4 Passed
4.
Call the .updatePixels() method on the image after all pixels are iterated through, but before the image is drawn with the image() function.


Hint
Remember the syntax for updating pixels for an image element:

img.updatePixels();

You should call this after the double for loop is closed so it updates all changes made while looping, and call it before image() is called so that you draw the most updated version of 
the image.

sketch.js
---------


let img;
let imagePath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/smiley.png';

function preload(){
  img = loadImage(imagePath);
}
function setup() {
  createCanvas(windowWidth, windowHeight);
  
  //Iterates through all pixels in the image
  for (let i = 0; i < img.width; i++){
    for (let j = 0; j < img.height; j++){
      //TODO: Get the color at the current pixel
      let pixel = img.get(i, j);
      //TODO: Check if the current pixel is black.
      //      If so, set it to blue.
      if (isPixelBlack(pixel)) {
        img.set(i, j, [0, 0, 255, 255]);
      }
    }
  }
  //TODO: Remember to update the pixels!
  img.updatePixels();
}

// isPixelBlack() takes in a  length-4 rgba color array, 
// and returns true when the color is pure black,
// i.e. [0, 0, 0, 255]
// Examples:
//   isPixelBlack([0, 0, 0, 255]) == true
//   isPixelBlack([255, 0, 0, 255]) == false
function isPixelBlack(colorArray){
  return (colorArray[0] == 0 &&
     colorArray[1] == 0 &&
     colorArray[2] == 0 &&
     colorArray[3] == 255);
}

//Draw the smiley wherever you move your cursor
function draw() {
  image(img, mouseX, mouseY);
};

//Resize the canvas to the size of the window
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Loading the Pixels Array
--------------------------
6 min
As mentioned earlier, pixel density can affect how you read the pixels array. Since different monitors have different pixel densities, let’s make things uniform by working with a pixel 
density of 1. To do this, use the pixelDensity() function.

function setup(){
  //Return the current pixel density
  pixelDensity(); 
  //Set the pixel density to 1
  pixelDensity(1); 
}

We could omit this step, but that’ll make some of the math harder to work with later on!

One quirk of setting a different pixel density using the pixelDensity() function is that it erases everything you drew on the canvas before calling it. In most cases, it’s a good idea to 
call it first thing in the setup() function, before any other code.

function setup() {
  // Set pixel density first
  pixelDensity(1);
  // The rest of the code can follow:
  createCanvas(400, 400)
  background(220);
}

Before accessing the pixels array, there’s one more step: loading the pixels with the loadPixels() function. loadPixels() loads the pixels in a canvas, populating the built-in pixels 
variable.

//Load the canvas pixels
loadPixels();
//Print the canvas' pixels array
console.log(pixels); 

Just like with get() and set(), you can also access pixels for individual images or videos. To do this, use the .loadPixels() method, which will populate the .pixels property on the image 
or video element.

//Load image pixels
img.loadPixels(); 
//Prints the image's pixels array
console.log(img.pixels); 

Note that when dealing with videos (or animated GIFs), it’s better to call the loadPixels() function in the draw() loop—you likely want to work with the latest frame.

function draw(){
  //Load video pixels of latest frame
  video.loadPixels(); 
  //Prints the video's pixels array
  console.log(video.pixels); 
}

Loading the data in the pixels array takes time—which can explain why the pixels array isn’t just available by default. In fact, the get() and set() functions both load the pixels every 
single time they’re called—which is why calling them a lot slows down the sketch significantly.

In contrast, accessing the entire pixels array requires loading pixels just once—which speeds up the process a lot and will allow us to do more wide-scale manipulations!

Still, keep in mind that working with the pixels array can potentially slow down your sketch, especially if you:

	. Load and manipulate the pixels array of high-resolution images or videos

	. Load and manipulate the pixels array in the draw() loop.

	. Print the pixels array to the console (we did it as a demonstration above, but this can really affect performance!)

Doing any of these alone may not cause problems, but you can troubleshoot laggy p5.js sketches by being mindful of the above.

* Instructions
--------------
Checkpoint 1 Passed
1.
In honor of Extraterrestrial Abductions Day, Codey wants to add a staticky, custom filter effect on their Vlog! In the p5.js code, you can see the code that makes up Codey’s Vlog.

The code that controls video playback has been moved to a separate file, videoOptions.js, to keep sketch.js as simple as possible.

You’ll eventually be in charge of adding this effect by reading and manipulating the .pixels array on the video element. Right now, we’ll prepare this array so we can work with it later 
in the next exercise.

First, in setup(), set the pixel density in the sketch to 1. Make sure to do this at the beginning of the setup() function, before another code is called.


Hint
To set the pixel density to a value, use the following syntax:

pixelDensity(value);

Setting pixel density can erase what has been previously drawn to the canvas—to avoid this problem, call this function at the top of the setup() function.

Checkpoint 2 Passed
2.
In the draw() loop, before the video is drawn, load the pixels of the video.

You won’t see any visible changes to the sketch, but this prepares the pixels array to be worked with in the next exercise!


Hint
To load pixels for a video element, use the .loadPixels() method on the element:

sketch.js
---------
let video;
let videoPath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/UFO.mp4';

function preload(){
  video = createVideo(videoPath);
}

function setup() {
  //TODO: Set pixel density to 1
  pixelDensity(1);
  createCanvas(480, 270);
  //Creates a background with a play symbol
  background(0);
  triangle(215, 110, 275, 140, 215, 170);
  //Hides the original HTML video element
  video.hide();
}

function draw() {
  //TODO: Load video pixels
  video.loadPixels();
  //Draw the video to the canvas
  image(video, 0, 0, 480, 270);
}

videoOptions.js
---------------
let isVolumeOn = true;

function pressPlayButton() {
  video.play();
}

function pressPauseButton() {
  video.pause();
}

function pressToggleVolumeButton() {
  if (isVolumeOn) {
    video.volume(0);
  } else {
    video.volume(1);
  }
  isVolumeOn = !isVolumeOn;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------








































































































































































































