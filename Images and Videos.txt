# IMAGES AND VIDEOS
-------------------

* Introduction to Images and Videos
-----------------------------------
<1 min
So far, we’ve learned to create dynamic p5.js sketches using only shapes and colors.

But, just like how you might add external images or videos onto a normal webpage, you can also use the p5.js library to incorporate external images or videos directly into the canvas!

By the end of this lesson, you will be able to:

	. Load and draw external images into the canvas

	. Display external videos in the canvas

	. Add filters effects across images and the canvas

	. Read and manipulate the pixels within the canvas, as well as in images and videos

* Instructions
--------------
Explore the p5.js sketch to the right. You’ll see that it uses a still image, an animated GIF image, and a video to create a multi-media collage. Click anywhere on the sketch to watch the 
video play!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Loading and Drawing Images
----------------------------
7 min
Unlike the primitive shapes we’ve drawn so far, media, like images, are considered external assets. To include them in our sketches, we will need to load them using special, built-in 
p5.js functions.

To load an image, use the loadImage() function. It requires one argument—the path to the image in your working directory.

img = loadImage('imageName.jpg');

The loadImage() function returns a p5.js Image element. Saving it to a variable lets us reuse the loaded image as many times as we want.

After loading an image, we use the image() function to draw it. The function requires three arguments: the p5.js Image element and the x and y positions where the image should be drawn on 
the canvas.

//Draw img to the top left corner of the canvas
image(img, 0, 0);

Optionally, the image() function can take other arguments. We can also resize the drawn image to a certain width and height, as follows:

let drawnWidth = 100;
let drawnHeight = 100;
image(img, 0, 0, drawnWidth, drawnHeight);

We can also add an additional four arguments to draw a cropped region of the image—check out the p5.js documentation to learn more.

You can also load and draw animated GIFs into the canvas using loadImage() and image(). To have them animate, you specifically need to put them inside the draw() loop. They’re essentially 
multiple images packed into one, so calling image() in the draw() loop will draw the latest frame of the GIF, allowing it to animate.

draw() {
  image(myAnimatedGIF, 0, 0);
}

Because drawing an image requires it to be completely loaded, it’s important to note how and when these functions are called.

Loading images takes time. In most cases, the loadImage() function won’t finish loading an image before the next lines of code are run—including any code that is supposed to draw the 
image.

Sometimes this is OK, but it can also potentially lead to unintended behavior. Later, we’ll learn to work around this problem by having more control over the loading of the images.

* Instructions
--------------
Checkpoint 1 Passed
1.
In the setup() function, load an image with the path given by imagePath. Save the loaded image to the img variable.


Hint
The syntax for loading an external image is:

variableName = loadImage('imageName.jpg');

Checkpoint 2 Passed
2.
In the draw() function after the line that draws the background color, draw the image at the top left corner of the canvas.


Hint
The syntax for drawing an image at a certain x, y position on the canvas is:

image(img, x, y);

The top left corner of the canvas is given by the coordinates (0, 0).

Checkpoint 3 Passed
3.
The image is cut off—we only see the top left piece of it!

Modify your image() function so that the image is scaled to the width and height of the canvas.


Hint
Remember that you can get the width and height of the canvas from built-in p5.js variables, width and height.

You can also see the width and height by looking at the parameters given to the createCanvas() function.

When supplied with values for width and height, the image() function lets you draw a scaled image to the canvas, as follows:

image(img, x, y, width, height);

sketch.js
---------
let img;
let imagePath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/cutePuppy.jpg';

function setup() {
  createCanvas(300, 400);
  //Load image here:
  img = loadImage(imagePath);
}

function draw() {
  background(220);
  //Draw image here:
  image(img, 0, 0, width, height);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The Preload Function
----------------------
6 min
If you’ve ever web-surfed with poor internet connection—you know firsthand that images can take a while to show up, even if other parts of the page load just fine.

This same behavior applies to p5.js sketches. Loading images takes time, and p5.js will typically move onto other code before an image fully loads.

In the last exercise, this was okay because we drew our image in the infinitely looping draw() function. Even if the image wasn’t loaded when the image() function was first called, it 
eventually could be drawn to the canvas.

But sometimes, it’s important that images are completely loaded before we attempt to draw them. For example, check out what happens when we try to load and draw the image within the 
setup() function:

A diagram that demonstrates what happens when you load and try to draw an image in the setup() function. The image never ends up drawing to the canvas.

Here, the image never shows up! By the time the image() function is called, the image isn’t fully loaded yet. The setup() function runs only once, so the image is not eventually drawn.

To solve problems like this, p5.js includes the preload() function. Like the setup() and draw() functions, it’s a special function to hold specific kinds of code for our p5.js sketch. 
Specifically, the preload() function is meant for code that loads external assets, like the loadImage() function.

let img;

function preload(){
    img = loadImage('myImage.png');
}

The p5.js library calls the preload() function before the setup() and draw() functions, which run only once all assets in preload() are entirely loaded.

let img;

function preload(){
  //This runs first.
  img = loadImage('myImage.png');

function setup(){
  //This runs once when all assets in preload() are completely loaded.
}
function draw(){
  //This loops infinitely after setup() finishes.
}

Let’s take a look at our previous scenario, now with the preload() function!

A diagram explaining the preload function. It walks through how p5.js will wait to load any images in preload() completely before moving onto the setup and draw functions. The image 
successfully draws to the canvas.

Our (very adorable) image now draws to the canvas! This is because p5.js waits to run the code in the setup() function only after the image is fully loaded.

* Instructions
--------------
Checkpoint 1 Passed
1.
The code currently attempts to draw the image in the setup() function. Run the code to observe how the image does not properly draw to the canvas.

Checkpoint 2 Passed
2.
Add a preload() function to sketch.js.


Hint
The syntax for a preload() function is:

function preload(){
  //Load images here
}

Checkpoint 3 Passed
3.
Move the line of code that loads the image from the setup() function, and into the preload() function you just added. Run the code—you should now see the image!


Hint
The line containing the loadImage() function is what loads the image.

You don’t need to modify the way the loadImage() call is written—just move the existing code to inside the preload() function.

sketch.js
---------
let img;

function preload(){
  img = loadImage(imagePath);
}

let imagePath = 'https://static-assets.codecademy.com/Courses/Learn-p5/media/cutePuppy.jpg';

function setup() {
  createCanvas(300, 400);
  
  background(220);
  image(img, 0, 0, 300, 400);
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------






























































